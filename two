#include <iostream>
#include <iomanip>
#include <cstdlib>
using namespace std;

void display(char board[][7]){
    for (int i = 0; i <= 5; i++){
        for (int j = 0; j <= 6; j++){
            cout<<setw(5)<<board[i][j];
        }
        cout<<endl;
    }
}

bool addval(char board[][7], int column, char value){
    int check = 5;
    while ((board[check][column] != '-') && (check >= 0)){
        check -= 1;
    }
    if (check == -1){
        return false;
    }
    else{
        board[check][column] = value;
        return true;
    }
}

void removeval(char board[][7], int column, char value){
    int check = 5;
    while ((board[check][column] != '-') && (check >= 0)){
        check -= 1;
    }
    board[check + 1][column] = '-';
}

int utility(char board[][7], char value){
    int total = 0;

    for (int i = 0; i <= 4; i++){
        for (int j = 0; j <= 6; j++){
            if ((board[i][j] == value) && (board[i+1][j] == value)){
                total += 1;
            }
        }
    }
    for (int i = 0; i <= 3; i++){
        for (int j = 0; j <= 6; j++){
            if ((board[i][j] == value) && (board[i+1][j] == value) && (board[i+2][j] == value)){
                total += 1;
            }
        }
    }

    for (int i = 0; i <= 5; i++){
        for (int j = 0; j <= 5; j++){
            if ((board[i][j] == value) && (board[i][j+1] == value)){
                total += 1;
            }
        }
    }
    for (int i = 0; i <= 5; i++){
        for (int j = 0; j <= 4; j++){
            if ((board[i][j] == value) && (board[i][j+1] == value) && (board[i][j+2] == value)){
                total += 1;
            }
        }
    }

    for (int i = 1; i <= 5; i++){
        for (int j = 0; j <= 5; j++){
            if ((board[i][j] == value) && (board[i-1][j+1] == value)){
                total += 1;
            }
        }
    }
    for (int i = 2; i <= 5; i++){
        for (int j = 0; j <= 4; j++){
            if ((board[i][j] == value) && (board[i-1][j+1] == value) && (board[i-2][j+2] == value)){
                total += 1;
            }
        }
    }

    for (int i = 0; i <= 4; i++){
        for (int j = 0; j <= 5; j++){
            if ((board[i][j] == value) && (board[i+1][j+1] == value)){
                total += 1;
            }
        }
    }
    for (int i = 0; i <= 3; i++){
        for (int j = 0; j <= 4; j++){
            if ((board[i][j] == value) && (board[i+1][j+1] == value) && (board[i+2][j+2] == value)){
                total += 1;
            }
        }
    }

    return total;
}

bool checkwin(char board[][7], char value){
    for (int i = 0; i <= 2; i++){
        for (int j = 0; j <= 6; j++){
            if ((board[i][j] == value) && (board[i+1][j] == value) && (board[i+2][j] == value) && (board[i+3][j] == value)){
                return true;
            }
        }
    }
    for (int i = 0; i <= 5; i++){
        for (int j = 0; j <= 3; j++){
            if ((board[i][j] == value) && (board[i][j+1] == value) && (board[i][j+2] == value) && (board[i][j+3] == value)){
                return true;
            }
        }
    }
    for (int i = 3; i <= 5; i++){
        for (int j = 0; j <= 3; j++){
            if ((board[i][j] == value) && (board[i-1][j+1] == value) && (board[i-2][j+2] == value) && (board[i-3][j+3] == value)){
                return true;
            }
        }
    }
    for (int i = 0; i <= 2; i++){
        for (int j = 0; j <= 3; j++){
            if ((board[i][j] == value) && (board[i+1][j+1] == value) && (board[i+2][j+2] == value) && (board[i+3][j+3] == value)){
                return true;
            }
        }
    }
    return false;
}

int minmax(char board[][7], int depth, bool comp){
    if (checkwin(board, 'O')){
        return (50 + 2*depth);
    }
    else if (checkwin(board, 'X')){
        return -1;
    }
    else if (depth == 0){
        return (utility(board, 'X') + depth);
    }

    if (comp){
        int max = -2;
        for (int i = 0; i <= 6; i++){
            if (addval(board, i, 'O')){
                int eval = minmax(board, (depth - 1), false);
                if (max <= eval){
                    max = eval;
                }
                removeval(board, i, 'O');
            }
        }
        if (max == -2){
            max = 0;
        }
        return max;
    }
    else{
        int min = 100;
        for (int i = 0; i <= 6; i++){
            if (addval(board, i, 'X')){
                int eval = minmax(board, (depth - 1), true);
                if (min >= eval){
                    min = eval;
                }
                removeval(board, i, 'X');
            }
        }
        if (min == 2){
            min = 0;
        }
        return min;
    }
}

int aimove(char board[][7]){
    int choice = -1;

    for (int i = 0; i <= 6; i++){
        if (addval(board, i, 'X')){
            if (checkwin(board, 'X')){
                choice = i;
            }
            removeval(board, i, 'X');
        }
    }

    if (choice != -1){
        return choice;
    }
    int max = -2;
    for (int i = 0; i <= 6; i++){
        if (addval(board, i, 'O')){
            int eval = minmax(board, 6, true);
            cout<<eval<<" "<<i<<"   ";
            if (eval > max){
                max = eval;
                choice = i;
            }
            removeval(board, i, 'O');
        }
    }
    
    return choice;
}

int main(){
    char board[6][7];

    for (int i = 0; i < 6; i++){
        for (int j = 0; j < 7; j++){
            board[i][j] = '-';
        }
    }

    char pvp;
    cout<<"Would you like to play 2 player mode (p) or player vs computer mode (c)? ";
    cin>>pvp;
    while ((pvp != 'p') && (pvp != 'c')){
        cout<<"wrong input, please enter p or c";
        cin>>pvp;
    }

    if (pvp == 'p'){
        int choice = 0;
        int turn = 1;

        display(board);
        cout<<"enter the number of column you want to add your mark at"<<endl;
        bool gameend = false;
        while (!(gameend)){
            if (turn % 2 == 1){
                cout<<"player 1 turn, enter choice: ";
                cin>>choice;
                while ((choice < 1) || (choice > 7)){
                    cout<<"invalid column, enter a chioce between 1 and 7: ";
                    cin>>choice;
                }
                while (!(addval(board, choice - 1, 'X'))){
                    cout<<"column filled, enter some other choice: ";
                    cin>>choice;
                    while ((choice < 1) || (choice > 7)){
                    cout<<"invalid column, enter a chioce between 1 and 7: ";
                    cin>>choice;
                    }
                }
                display(board);
                if (checkwin(board,'X')){
                    cout<<"player 1 wins!!"<<endl;
                    gameend = true;
                }
                if ((board[0][0] != '-') && (board[0][1] != '-') && (board[0][2] != '-') && (board[0][3] != '-') && (board[0][4] != '-') && (board[0][5] != '-') && (board[0][6] != '-')){
                    gameend = true;
                }
                turn += 1;
            }
            else{
                cout<<"player 2 turn, enter choice: ";
                cin>>choice;
                while ((choice < 1) || (choice > 7)){
                    cout<<"invalid column, enter a chioce between 1 and 7: ";
                    cin>>choice;
                }
                while (!(addval(board, choice - 1, 'O'))){
                    cout<<"column filled, enter some other choice: ";
                    cin>>choice;
                    while ((choice < 1) || (choice > 7)){
                    cout<<"invalid column, enter a chioce between 1 and 7: ";
                    cin>>choice;
                    }
                }
                display(board);
                if (checkwin(board,'O')){
                    cout<<"player 2 wins!!"<<endl;
                    gameend = true;
                }
                if ((board[0][0] != '-') && (board[0][1] != '-') && (board[0][2] != '-') && (board[0][3] != '-') && (board[0][4] != '-') && (board[0][5] != '-') && (board[0][6] != '-')){
                    gameend = true;
                }
                turn += 1;
            }
        }    
    }

    if (pvp == 'c'){
        int choice = 0;
        int turn = 1;

        display(board);
        cout<<"enter the number of column you want to add your mark at"<<endl;
        bool gameend = false;
        while (!(gameend)){
            if (turn % 2 == 1){
                cout<<"player's turn, enter choice: ";
                cin>>choice;
                while ((choice < 1) || (choice > 7)){
                    cout<<"invalid column, enter a chioce between 1 and 7: ";
                    cin>>choice;
                }
                while (!(addval(board, choice - 1, 'X'))){
                    cout<<"column filled, enter some other choice: ";
                    cin>>choice;
                    while ((choice < 1) || (choice > 7)){
                    cout<<"invalid column, enter a chioce between 1 and 7: ";
                    cin>>choice;
                    }
                }
                display(board);
                if (checkwin(board,'X')){
                    cout<<"player wins!!"<<endl;
                    gameend = true;
                }
                if ((board[0][0] != '-') && (board[0][1] != '-') && (board[0][2] != '-') && (board[0][3] != '-') && (board[0][4] != '-') && (board[0][5] != '-') && (board[0][6] != '-')){
                    gameend = true;
                }
                turn += 1;
            }
            else{
                cout<<"computer's turn: "<<endl;
                choice = aimove(board);
                if (choice < 0){
                choice = (rand() % 7);
                }
                while (!(addval(board, choice, 'O'))){
                choice = rand() % 7;
                }
                display(board);
                if (checkwin(board,'O')){
                    cout<<"computer wins!!"<<endl;
                    gameend = true;
                }
                if ((board[0][0] != '-') && (board[0][1] != '-') && (board[0][2] != '-') && (board[0][3] != '-') && (board[0][4] != '-') && (board[0][5] != '-') && (board[0][6] != '-')){
                    gameend = true;
                }
                turn += 1;

            }
        }
    }
    if (!checkwin(board, 'X') && !checkwin(board, 'O')){
        cout<<"no space left, game drawn"<<endl;
    }
    
    return 0;
}
